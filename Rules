#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.
require 'date'

preprocess do
  # See: http://nanoc.ws/docs/api/Nanoc/Helpers/Blogging.html
  # Assume all items inside /blog are blog articles unless otherwise specified.
  items.select { |item| item.identifier.match(/^\/blog\/posts\/.+/) }.each do |item|
    item[:kind] ||= 'article' # Required by Nanoc::Helpers::Blogging
  end

  # Assign a date to all items (not only blog posts) unless they have it already defined.
  @items.each do |item|
    if item[:created_at]
      item[:created_at] = attribute_to_time(item[:created_at])
    else
      item[:created_at] = Time.now
    end
    if item[:updated_at]
      item[:updated_at] = attribute_to_time(item[:updated_at])
    end
  end

  # Build tag pages for blog postts
  build_tag_pages(articles())

  # Build yearly and monthly archives of blog posts
  build_archives(sorted_articles())
end

passthrough '/assets/files/*'

compile '/assets/images/favicon' do
end

route '/assets/images/favicon' do
  '/' + File.basename(item.identifier) + '.' + item[:extension]
end

passthrough '/assets/images/*'

compile '/assets/javascripts/*' do
  filter :concat_js
  filter :uglify_js if ENV['NANOC_ENV'] == 'production'
end

route '/assets/javascripts/*' do
  '/javascripts/' + File.basename(item.identifier) + '.js'
end

compile '/assets/stylesheets/*' do
  filter :sass, Compass.sass_engine_options
end

route '/assets/stylesheets/*' do
  '/css/' + File.basename(item.identifier) + '.css'
end

# Blog index
compile '/blog' do # Matches /blog/index.erb
  filter :erb
  layout 'blog/default'
  layout 'default'
  filter :relativize_paths, :type => :html
end

route '/blog' do # Matches /blog/index.erb
  item.identifier + 'index.html'
end

# Blog feed
compile '/blog/feed' do # Matches /blog/feed.erb
  filter :erb
  filter :relativize_paths, :type => :html
end

route '/blog/feed' do # Matches /blog/feed.erb
  '/blog/feed.xml'
end

# Blog tags (items generated during preprocessing)
compile '/blog/tags/*' do
  filter :erb
  layout 'blog/default'
  layout 'default'
  filter :relativize_paths, :type => :html
end

route '/blog/tags/*' do
  item.identifier + 'index.html'
end

# Blog archives (items generated during preprocessing)
compile '/blog/archives/*' do
  filter :erb
  layout 'blog/default'
  layout 'default'
  filter :relativize_paths, :type => :html
end

route '/blog/archives/*' do
  item.identifier + 'index.html'
end

# Blog posts
compile '/blog/posts/*' do
  if 'mmd' == @item[:extension]
    filter :multimarkdown,
           #:path => '/usr/local/bin',
           :accept => true,
           :mask => true,
           :labels => false,
           :smart => true,
           :process_html => false,
           :compatibility => false
  else # assume Markdown
    filter :kramdown,
           :enable_coderay => true,
           :coderay_line_numbers => nil
  end
  layout 'blog/article'
  layout 'blog/default'
  layout 'default'
  filter :relativize_paths, :type => :html
end

route '/blog/posts/*' do
  begin
    year, month, day = item.attributes[:created_at].strftime('%Y-%m-%d').match(/(\d{4})-(\d\d)-(\d\d)/)[1..3]
    "/blog/#{year}/#{month}/#{day}/#{File.basename(item.identifier)}/index.html"
  rescue
    puts "\033[1;35mWarn:\033[0m Could not parse date for #{item.identifier}"
  end
end

compile '/sitemap' do
  filter :erb
end

route '/sitemap' do
  '/sitemap.xml'
end

# static
ignore '/font-awesome/scss/*'

compile '/font-awesome/fonts/*' do
end

route '/font-awesome/fonts/*' do
  '/fonts/' + File.basename(item.identifier)
end
# end static

passthrough '/404'
passthrough '/humans'
passthrough '/robots'

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    layout 'default'
    filter :relativize_paths, :type => :html
  end
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb
